<!DOCTYPE html>
<html lang="en"><head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Ошибка 404</title>
<link href="https://fonts.googleapis.com/css2?family=Noto+Sans:wght@400;700&amp;display=swap" rel="stylesheet">
<script src="https://yastatic.net/pcode/adfox/loader.js" crossorigin="anonymous"></script>
<script type="text/javascript" language="javascript">
var punycode = new function Punycode() {
    this.utf16 = {
        decode:function(input){
            var output = [], i=0, len=input.length,value,extra;
            while (i < len) {
                value = input.charCodeAt(i++);
                if ((value & 0xF800) === 0xD800) {
                    extra = input.charCodeAt(i++);
                    if ( ((value & 0xFC00) !== 0xD800) || ((extra & 0xFC00) !== 0xDC00) ) {
                        throw new RangeError("UTF-16(decode): Illegal UTF-16 sequence");
                    }
                    value = ((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000;
                }
                output.push(value);
            }
            return output;
        },
        encode:function(input){
            var output = [], i=0, len=input.length,value;
            while (i < len) {
                value = input[i++];
                if ( (value & 0xF800) === 0xD800 ) {
                    throw new RangeError("UTF-16(encode): Illegal UTF-16 value");
                }
                if (value > 0xFFFF) {
                    value -= 0x10000;
                    output.push(String.fromCharCode(((value >>>10) & 0x3FF) | 0xD800));
                    value = 0xDC00 | (value & 0x3FF);
                }
                output.push(String.fromCharCode(value));
            }
            return output.join("");
        }
    }
    var initial_n = 0x80;
    var initial_bias = 72;
    var delimiter = "\x2D";
    var base = 36;
    var damp = 700;
    var tmin=1;
    var tmax=26;
    var skew=38;
    var maxint = 0x7FFFFFFF;

    function decode_digit(cp) {
        return cp - 48 < 10 ? cp - 22 : cp - 65 < 26 ? cp - 65 : cp - 97 < 26 ? cp - 97 : base;
    }

    function encode_digit(d, flag) {
        return d + 22 + 75 * (d < 26) - ((flag != 0) << 5);
    }
    function adapt(delta, numpoints, firsttime ) {
        var k;
        delta = firsttime ? Math.floor(delta / damp) : (delta >> 1);
        delta += Math.floor(delta / numpoints);

        for (k = 0; delta > (((base - tmin) * tmax) >> 1); k += base) {
                delta = Math.floor(delta / ( base - tmin ));
        }
        return Math.floor(k + (base - tmin + 1) * delta / (delta + skew));
    }

    function encode_basic(bcp, flag) {
        bcp -= (bcp - 97 < 26) << 5;
        return bcp + ((!flag && (bcp - 65 < 26)) << 5);
    }

    this.decode=function(input,preserveCase) {
        var output=[];
        var case_flags=[];
        var input_length = input.length;

        var n, out, i, bias, basic, j, ic, oldi, w, k, digit, t, len;

        n = initial_n;
        i = 0;
        bias = initial_bias;

        basic = input.lastIndexOf(delimiter);
        if (basic < 0) basic = 0;

        for (j = 0; j < basic; ++j) {
            if(preserveCase) case_flags[output.length] = ( input.charCodeAt(j) -65 < 26);
            if ( input.charCodeAt(j) >= 0x80) {
                throw new RangeError("Illegal input >= 0x80");
            }
            output.push( input.charCodeAt(j) );
        }

        for (ic = basic > 0 ? basic + 1 : 0; ic < input_length; ) {

            for (oldi = i, w = 1, k = base; ; k += base) {
                    if (ic >= input_length) {
                        throw RangeError ("punycode_bad_input(1)");
                    }
                    digit = decode_digit(input.charCodeAt(ic++));

                    if (digit >= base) {
                        throw RangeError("punycode_bad_input(2)");
                    }
                    if (digit > Math.floor((maxint - i) / w)) {
                        throw RangeError ("punycode_overflow(1)");
                    }
                    i += digit * w;
                    t = k <= bias ? tmin : k >= bias + tmax ? tmax : k - bias;
                    if (digit < t) { break; }
                    if (w > Math.floor(maxint / (base - t))) {
                        throw RangeError("punycode_overflow(2)");
                    }
                    w *= (base - t);
            }

            out = output.length + 1;
            bias = adapt(i - oldi, out, oldi === 0);

          if ( Math.floor(i / out) > maxint - n) {
                throw RangeError("punycode_overflow(3)");
            }
            n += Math.floor( i / out ) ;
            i %= out;

            if (preserveCase) { case_flags.splice(i, 0, input.charCodeAt(ic -1) -65 < 26);}

            output.splice(i, 0, n);
            i++;
        }
        if (preserveCase) {
            for (i = 0, len = output.length; i < len; i++) {
                if (case_flags[i]) {
                    output[i] = (String.fromCharCode(output[i]).toUpperCase()).charCodeAt(0);
                }
            }
        }
        return this.utf16.encode(output);
    };
    
    this.encode = function (input,preserveCase) {
    
        var n, delta, h, b, bias, j, m, q, k, t, ijv, case_flags;

        if (preserveCase) {
            case_flags = this.utf16.decode(input);
        }
        input = this.utf16.decode(input.toLowerCase());

        var input_length = input.length; 

        if (preserveCase) {
    
            for (j=0; j < input_length; j++) {
                case_flags[j] = input[j] != case_flags[j];
            }
        }

        var output=[];

        n = initial_n;
        delta = 0;
        bias = initial_bias;

        for (j = 0; j < input_length; ++j) {
            if ( input[j] < 0x80) {
                output.push(
                    String.fromCharCode(
                        case_flags ? encode_basic(input[j], case_flags[j]) : input[j]
                    )
                );
            }
        }

        h = b = output.length;

        if (b > 0) output.push(delimiter);

        while (h < input_length) {

            for (m = maxint, j = 0; j < input_length; ++j) {
                ijv = input[j];
                if (ijv >= n && ijv < m) m = ijv;
            }

            if (m - n > Math.floor((maxint - delta) / (h + 1))) {
                throw RangeError("punycode_overflow (1)");
            }
            delta += (m - n) * (h + 1);
            n = m;

            for (j = 0; j < input_length; ++j) {
                ijv = input[j];

                if (ijv < n ) {
                    if (++delta > maxint) return Error("punycode_overflow(2)");
                }

                if (ijv == n) {
 
                    for (q = delta, k = base; ; k += base) {
                        t = k <= bias ? tmin : k >= bias + tmax ? tmax : k - bias;
                        if (q < t) break;
                        output.push( String.fromCharCode(encode_digit(t + (q - t) % (base - t), 0)) );
                        q = Math.floor( (q - t) / (base - t) );
                    }
                    output.push( String.fromCharCode(encode_digit(q, preserveCase && case_flags[j] ? 1:0 )));
                    bias = adapt(delta, h + 1, h == b);
                    delta = 0;
                    ++h;
                }
            }

            ++delta, ++n;
        }
        return output.join("");
    }

    this.ToASCII = function ( domain ) {
        var domain_array = domain.split(".");
        var out = [];
        for (var i=0; i < domain_array.length; ++i) {
            var s = domain_array[i];
            out.push(
                s.match(/[^A-Za-z0-9-]/) ?
                "xn--" + punycode.encode(s) :
                s
            );
        }
        return out.join(".");
    }
    this.ToUnicode = function ( domain ) {
        var domain_array = domain.split(".");
        var out = [];
        for (var i=0; i < domain_array.length; ++i) {
            var s = domain_array[i];
            out.push(
                s.match(/^xn--/) ?
                punycode.decode(s.slice(4)) :
                s
            );
        }
        return out.join(".");
    }
}();
</script>
<style>
	
        body {
            margin: 0;
            font-family: 'Noto Sans', sans-serif;
            color: #14295E;
        }

        h1 {
            font-size: 28px;
            line-height: 30px;
            margin-top: 0;
            margin-bottom: 10px;
        }

        a {
            color: #14295E;
        }

        .wrapper {		
			padding: 0px;
			margin: 0 auto;
			max-width: 1024px;
			height: 85vh;
			display: flex;
			flex-direction: column;
			justify-content: space-between;
        }

        .logo {
            padding: 30px 40px;
        }

        .content {
            display: flex;
            justify-content: space-between;
            margin: 0 82px;
        }

        .left {
            display: flex;
			flex-direction: column;
			align-items: flex-start;
			justify-content: center;
			width: 420px;
			padding-right: 80px;
		}

        .text {
            font-size: 15px;
            line-height: 20px;
        }

        .image-wrapper {
            width: 257px;
        }

        .banner {
            margin-top: 140px;
			margin-bottom: 40px;
			margin-left: 120px;
			margin-right: 120px;
        }

        @media only screen and (max-width: 960px) {
            h1 {
                margin-top: 22px;
            }

            .logo {
                padding: 15px 15px 15px;
            }

            .content {
                flex-direction: column-reverse;
                align-items: center;
                margin: 0 15px;
            }

            .image-wrapper {
                width: 240px;
            }

            .left {
                width: auto;
				padding-right: 0px;
            }

            .banner {
                margin-top: 40px;
                margin-left: 15px;
                margin-right: 15px;
            }
        }
    </style>
</head>
<body>
<header>
<div class="logo">
<a href="https://www.nic.ru/">
<svg width="100" height="42" viewBox="0 0 100 42" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M39.2312 20.9475C38.5291 20.9475 37.8711 20.8599 37.2572 20.6853C36.643 20.5101 36.1075 20.2386 35.6492 19.8703C35.2028 19.5083 34.8549 19.0539 34.6046 18.5081C34.354 17.9616 34.2285 17.3299 34.2285 16.6124C34.2285 15.6855 34.4043 14.8246 34.7557 14.0302C35.1069 13.2354 35.6004 12.5411 36.235 11.9456C36.8587 11.3621 37.6191 10.9003 38.5167 10.5599C39.4146 10.219 40.3862 10.0491 41.43 10.0491C42.0596 10.0491 42.6839 10.1195 43.304 10.2608C43.9238 10.4019 44.4992 10.6071 45.0306 10.8765L44.3344 13.7005H43.8667C43.5072 13.2651 43.0992 12.9417 42.6442 12.73C42.1892 12.5185 41.6776 12.4122 41.1093 12.4122C40.0711 12.4122 39.2371 12.7831 38.6084 13.5229C37.9788 14.2621 37.6643 15.1854 37.6643 16.2902C37.6643 17.0582 37.8584 17.6323 38.2463 18.0124C38.6344 18.3932 39.2371 18.5838 40.056 18.5838C40.6907 18.5838 41.2696 18.4531 41.7921 18.193C42.3143 17.9322 42.7617 17.643 43.1347 17.324H43.6016L42.9054 20.1468C42.2457 20.4352 41.6667 20.6404 41.1694 20.7634C40.6714 20.8857 40.0247 20.9475 39.2312 20.9475Z" fill="#14295E"></path>
<path d="M53.1509 14.1788C53.1695 14.0678 53.1828 13.9659 53.1923 13.8744C53.2017 13.7815 53.2065 13.6867 53.2065 13.5876C53.2065 13.1011 53.0556 12.7287 52.7556 12.47C52.455 12.211 52.0227 12.0815 51.4591 12.0815C50.7787 12.0815 50.2065 12.2666 49.7435 12.636C49.2798 13.0064 48.9298 13.5204 48.6905 14.1788H53.1509ZM50.6269 20.948C48.8727 20.948 47.5192 20.5584 46.5648 19.7785C45.6118 18.9989 45.1343 17.922 45.1343 16.5476C45.1343 15.6088 45.2902 14.7467 45.602 13.9614C45.9136 13.1759 46.363 12.486 46.9503 11.8903C47.5121 11.3132 48.2153 10.8571 49.0582 10.5185C49.9023 10.1814 50.829 10.0122 51.8381 10.0122C53.371 10.0122 54.5287 10.3243 55.3083 10.9474C56.0872 11.5707 56.4772 12.4905 56.4772 13.706C56.4772 14.1239 56.4352 14.5317 56.3532 14.9311C56.2704 15.3303 56.1618 15.7267 56.0275 16.119H48.3689V16.3311C48.3689 17.0477 48.6204 17.6093 49.121 18.0138C49.6236 18.4189 50.3929 18.6208 51.4278 18.6208C52.1503 18.6208 52.834 18.4985 53.4804 18.2532C54.1263 18.0082 54.6887 17.7343 55.1659 17.4347H55.5337L54.9183 20.0924C54.2769 20.3745 53.6017 20.5878 52.8923 20.7312C52.184 20.8758 51.4287 20.948 50.6269 20.948Z" fill="#14295E"></path>
<path d="M68.7965 10.7206C68.2832 10.2734 67.5642 10.0494 66.6405 10.0494C65.9678 10.0494 65.3521 10.1757 64.792 10.4257C64.2317 10.6779 63.6136 11.0274 62.9346 11.475L63.2065 10.3343L58.7385 10.3351L58.2337 12.5144H59.3852L57.5098 20.6619H60.8287L62.5044 13.3418C62.9323 13.1149 63.3172 12.9453 63.6601 12.831C64.0021 12.7178 64.305 12.6611 64.5681 12.6611C65.1059 12.6611 65.4755 12.7529 65.6772 12.9364C65.879 13.1214 65.9802 13.4122 65.9802 13.8107C65.9802 14.0439 65.9556 14.2963 65.9062 14.5651C65.858 14.8347 65.7908 15.1599 65.7059 15.5395L64.5355 20.6619H67.8761L69.4119 13.9393C69.466 13.7071 69.5068 13.4832 69.5305 13.2679C69.5547 13.0534 69.5666 12.8539 69.5666 12.67C69.5666 11.818 69.3098 11.1679 68.7965 10.7206Z" fill="#14295E"></path>
<path d="M86.2181 14.1788C86.2359 14.0678 86.2498 13.9659 86.259 13.8744C86.2684 13.7815 86.2735 13.6867 86.2735 13.5876C86.2735 13.1011 86.1229 12.7287 85.822 12.47C85.522 12.211 85.0897 12.0815 84.5255 12.0815C83.8448 12.0815 83.2732 12.2666 82.8105 12.636C82.3474 13.0064 81.9971 13.5204 81.7569 14.1788H86.2181ZM83.6942 20.948C81.9394 20.948 80.5859 20.5584 79.632 19.7785C78.6788 18.9989 78.2007 17.922 78.2007 16.5476C78.2007 15.6088 78.3569 14.7467 78.6684 13.9614C78.9803 13.1759 79.4297 12.486 80.017 11.8903C80.5791 11.3132 81.2818 10.8571 82.1255 10.5185C82.9693 10.1814 83.8951 10.0122 84.9042 10.0122C86.4383 10.0122 87.5954 10.3243 88.375 10.9474C89.1545 11.5707 89.5439 12.4905 89.5439 13.706C89.5439 14.1239 89.5022 14.5317 89.4196 14.9311C89.3377 15.3303 89.2285 15.7267 89.0939 16.119H81.4356V16.3311C81.4356 17.0477 81.6865 17.6093 82.1886 18.0138C82.6909 18.4189 83.4593 18.6208 84.4945 18.6208C85.217 18.6208 85.9013 18.4985 86.5468 18.2532C87.1936 18.0082 87.7557 17.7343 88.2329 17.4347H88.6004L87.9856 20.0924C87.3436 20.3745 86.6681 20.5878 85.9596 20.7312C85.2501 20.8758 84.4954 20.948 83.6942 20.948Z" fill="#14295E"></path>
<path d="M99.2681 13.4888H98.9758C98.8288 13.4395 98.622 13.403 98.3533 13.3789C98.0853 13.3543 97.8202 13.3412 97.5578 13.3412C97.124 13.3412 96.7066 13.3742 96.3042 13.438C95.9013 13.5028 95.4868 13.6046 95.0607 13.7463L93.4622 20.6619H90.1421L92.5276 10.3339H95.8489L95.4986 11.8518C96.1202 11.3921 96.7406 11.0182 97.3604 10.7295C97.9791 10.4418 98.6033 10.2974 99.2315 10.2974C99.3474 10.2974 99.4773 10.3007 99.6202 10.3066C99.764 10.3129 99.8906 10.3221 99.9998 10.3339L99.2681 13.4888Z" fill="#14295E"></path>
 <path d="M76.5138 10.3344L77.1899 7.38243H73.8798L73.2017 10.3344H71.8428L71.3381 12.5143H72.7301L70.8579 20.6624H74.168C74.1881 20.5789 74.205 20.4949 74.2248 20.4111L76.0396 12.5143H78.2428L78.7443 10.3344H76.5138Z" fill="#14295E"></path>
<path d="M11.7508 12.4608C11.4899 12.2898 11.1042 12.2045 10.5951 12.2045H9.2993L8.66681 14.9427H9.9554C10.6505 14.9427 11.1891 14.8008 11.5705 14.5163C11.9524 14.2315 12.1431 13.8362 12.1431 13.3319C12.1431 12.9221 12.0131 12.6313 11.7508 12.4608ZM24.9706 16.7962C24.6395 18.2069 24.0778 19.23 23.2867 19.8664C22.4953 20.5029 21.3494 20.8215 19.8493 20.8215C18.5122 20.8215 17.5007 20.5807 16.8142 20.0993C16.1277 19.6176 15.7851 18.8891 15.7851 17.9117C15.7851 17.7115 15.8003 17.5081 15.8321 17.3026C15.8639 17.0971 15.898 16.91 15.935 16.7413L17.3935 10.4298H20.0342L18.5801 16.7478C18.5474 16.8758 18.5218 17.0166 18.501 17.1692C18.4796 17.3216 18.47 17.449 18.47 17.5491C18.47 17.9779 18.5986 18.3037 18.8564 18.5247C19.1129 18.7459 19.539 18.857 20.1346 18.857C20.7132 18.857 21.1801 18.6966 21.5364 18.3774C21.8932 18.0581 22.1495 17.561 22.3046 16.8853L23.7972 10.4298H26.4429L24.9706 16.7962ZM14.551 20.6232H11.6275L9.71537 16.8853H8.24415L7.38202 20.6232H4.764L7.10776 10.4298H11.071C12.313 10.4298 13.272 10.6403 13.9504 11.0624C14.6279 11.4847 14.9663 12.13 14.9663 12.9963C14.9663 13.8139 14.7186 14.5002 14.2228 15.0568C13.7274 15.6139 13.055 16.0339 12.2038 16.3169L14.551 20.6232ZM15.7148 0C7.0353 0 0 7.06316 0 15.7755C0 24.4884 7.0353 31.5513 15.7148 31.5513C24.3941 31.5513 31.4311 24.4884 31.4311 15.7755C31.4311 7.06316 24.3941 0 15.7148 0Z" fill="#14295E"></path>
<path d="M67.6909 29.0176C79.3004 28.8359 89.1729 30.3268 99.1019 32.6982C90.5281 28.8251 81.2373 26.3193 70.6522 25.6576C68.319 25.5117 65.9229 25.4555 63.4578 25.4939C43.5033 25.8058 25.779 32.2138 14.1929 42C28.0245 34.4046 46.8631 29.342 67.6909 29.0176Z" fill="#EF3F23"></path>
</svg>
</a>
</div>
</header>
<div class="wrapper">
<div class="content">
<div class="left">
<h1>
Это какая-то ошибка!
</h1>
<div class="text">
На сайте <script>document.write(punycode.ToUnicode(location.hostname));</script> произошла ошибка 404. Запрашиваемая страница на сайте отсутствует.
<br><br>
<a href="https://www.nic.ru/help/oshibka-404_8500.html">Прочитать про возможные причины ошибки</a>
<br><br>
<a href="/">Вернуться на главную</a>
</div>
</div>
<div class="image-wrapper">
<svg viewBox="0 0 257 290" fill="none" xmlns="http://www.w3.org/2000/svg">
<path opacity="0.1" d="M125.954 245.406C161.742 245.406 190.754 235.492 190.754 223.263C190.754 211.034 161.742 201.121 125.954 201.121C90.1665 201.121 61.1548 211.034 61.1548 223.263C61.1548 235.492 90.1665 245.406 125.954 245.406Z" fill="#14295E"></path>
<path d="M155.732 213.315V36.2155C155.732 27.6313 151.919 19.8274 146.186 14.1726C140.466 8.5179 132.706 5.00009 124.022 5.00009C106.655 5.00009 92.5793 19.0471 92.5793 36.2155V114.492L78.0056 122.671V65.7528C78.0056 62.207 76.3956 58.9837 74.0281 56.6481C71.6653 54.3124 68.1606 52.8594 64.5742 52.8594C57.4006 52.8594 51.2874 58.6613 51.2874 65.7528C51.2874 65.7528 51.5447 141.678 51.5447 142.212C51.5548 148.142 55.836 155.364 61.0508 158.337C61.4173 158.548 61.7951 158.724 62.1511 158.88C68.0275 161.752 76.6032 161.933 81.4317 159.177L92.5793 152.973V213.435V216.521C92.5793 223.892 102.393 230.364 115.57 232.333C132.451 234.842 149.708 228.983 154.287 219.258C154.846 218.057 155.398 216.857 155.531 215.668C155.617 214.876 155.732 214.083 155.732 213.315Z" fill="white" stroke="#14295E" stroke-width="2" stroke-miterlimit="10" stroke-linejoin="round"></path>
<path opacity="0.1" d="M136.269 15.109C136.269 15.3222 136.145 15.6755 135.575 16.1361C135.013 16.5897 134.14 17.0425 132.971 17.4416C130.645 18.2366 127.367 18.7461 123.699 18.7461C120.032 18.7461 116.753 18.2366 114.427 17.4416C113.259 17.0425 112.385 16.5897 111.824 16.1361C111.254 15.6755 111.129 15.3222 111.129 15.109C111.129 14.8958 111.254 14.5425 111.824 14.0819C112.385 13.6283 113.259 13.1755 114.427 12.7764C116.753 11.9814 120.032 11.4719 123.699 11.4719C127.367 11.4719 130.645 11.9814 132.971 12.7764C134.14 13.1755 135.013 13.6283 135.575 14.0819C136.145 14.5425 136.269 14.8958 136.269 15.109Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path opacity="0.1" d="M62.1379 117.957C59.5064 117.957 57.3691 115.827 57.3691 113.254V66.4306C57.3691 63.8572 59.5064 61.7278 62.1379 61.7278C64.7693 61.7278 66.9066 63.8572 66.9066 66.4306V113.254C66.9066 115.827 64.7693 117.957 62.1379 117.957Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path opacity="0.1" d="M177.946 155.505C177.712 155.505 177.329 155.342 176.952 154.72C176.586 154.119 176.328 153.227 176.328 152.195V116.806C176.328 115.775 176.586 114.883 176.952 114.281C177.329 113.66 177.712 113.496 177.946 113.496C178.181 113.496 178.563 113.66 178.941 114.281C179.306 114.883 179.565 115.775 179.565 116.806V152.195C179.565 153.227 179.306 154.119 178.941 154.72C178.563 155.342 178.181 155.505 177.946 155.505Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M176.055 84.6508H174.029C170.067 84.6508 166.662 87.8449 166.662 91.7619V146.686L155.731 152.963V176.856L178.806 163.7V163.625C181.235 162.563 183.664 160.003 183.664 157.03V91.7619C183.664 87.8449 180.018 84.6508 176.055 84.6508Z" stroke="#14295E" stroke-width="2" stroke-miterlimit="10" stroke-linejoin="round"></path>
<path d="M105.318 76.2591C105.318 76.4627 105.148 76.6473 104.914 76.6473C104.679 76.6473 104.509 76.4627 104.509 76.2591C104.509 76.0555 104.679 75.8709 104.914 75.8709C105.148 75.8709 105.318 76.0555 105.318 76.2591Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M124.749 35.4389C124.749 35.6425 124.579 35.8271 124.345 35.8271C124.111 35.8271 123.941 35.6425 123.941 35.4389C123.941 35.2354 124.111 35.0508 124.345 35.0508C124.579 35.0508 124.749 35.2354 124.749 35.4389Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M112.605 29.436C112.605 29.6395 112.435 29.8241 112.201 29.8241C111.967 29.8241 111.796 29.6395 111.796 29.436C111.796 29.2324 111.967 29.0478 112.201 29.0478C112.435 29.0478 112.605 29.2324 112.605 29.436Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M138.109 53.4478C138.109 53.6514 137.939 53.836 137.705 53.836C137.47 53.836 137.3 53.6514 137.3 53.4478C137.3 53.2443 137.47 53.0597 137.705 53.0597C137.939 53.0597 138.109 53.2443 138.109 53.4478Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M113.819 47.4449C113.819 47.6485 113.649 47.8331 113.415 47.8331C113.181 47.8331 113.011 47.6485 113.011 47.4449C113.011 47.2413 113.181 47.0567 113.415 47.0567C113.649 47.0567 113.819 47.2413 113.819 47.4449Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M136.894 27.0348C136.894 27.2384 136.724 27.423 136.49 27.423C136.256 27.423 136.085 27.2384 136.085 27.0348C136.085 26.8312 136.256 26.6466 136.49 26.6466C136.724 26.6466 136.894 26.8312 136.894 27.0348Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M105.318 58.2502C105.318 58.4538 105.148 58.6384 104.914 58.6384C104.679 58.6384 104.509 58.4538 104.509 58.2502C104.509 58.0466 104.679 57.862 104.914 57.862C105.148 57.862 105.318 58.0466 105.318 58.2502Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M127.178 63.0526C127.178 63.2562 127.008 63.4408 126.774 63.4408C126.54 63.4408 126.37 63.2562 126.37 63.0526C126.37 62.849 126.54 62.6644 126.774 62.6644C127.008 62.6644 127.178 62.849 127.178 63.0526Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M141.752 37.8401C141.752 38.0437 141.582 38.2283 141.348 38.2283C141.113 38.2283 140.943 38.0437 140.943 37.8401C140.943 37.6365 141.113 37.4519 141.348 37.4519C141.582 37.4519 141.752 37.6365 141.752 37.8401Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M141.752 79.8609C141.752 80.0645 141.582 80.2491 141.348 80.2491C141.113 80.2491 140.943 80.0645 140.943 79.8609C140.943 79.6573 141.113 79.4727 141.348 79.4727C141.582 79.4727 141.752 79.6573 141.752 79.8609Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M124.749 91.8668C124.749 92.0704 124.579 92.255 124.345 92.255C124.111 92.255 123.941 92.0704 123.941 91.8668C123.941 91.6633 124.111 91.4787 124.345 91.4787C124.579 91.4787 124.749 91.6633 124.749 91.8668Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M105.318 90.6663C105.318 90.8698 105.148 91.0544 104.914 91.0544C104.679 91.0544 104.509 90.8698 104.509 90.6663C104.509 90.4627 104.679 90.2781 104.914 90.2781C105.148 90.2781 105.318 90.4627 105.318 90.6663Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M105.318 135.088C105.318 135.292 105.148 135.476 104.914 135.476C104.679 135.476 104.509 135.292 104.509 135.088C104.509 134.885 104.679 134.7 104.914 134.7C105.148 134.7 105.318 134.885 105.318 135.088Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M91.9588 126.684C91.9588 126.888 91.7887 127.072 91.5546 127.072C91.3205 127.072 91.1504 126.888 91.1504 126.684C91.1504 126.48 91.3205 126.296 91.5546 126.296C91.7887 126.296 91.9588 126.48 91.9588 126.684Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M83.4574 142.292C83.4574 142.495 83.2873 142.68 83.0532 142.68C82.819 142.68 82.6489 142.495 82.6489 142.292C82.6489 142.088 82.819 141.904 83.0532 141.904C83.2873 141.904 83.4574 142.088 83.4574 142.292Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M71.3129 145.894C71.3129 146.097 71.1427 146.282 70.9086 146.282C70.6745 146.282 70.5044 146.097 70.5044 145.894C70.5044 145.69 70.6745 145.505 70.9086 145.505C71.1427 145.505 71.3129 145.69 71.3129 145.894Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M71.3129 132.687C71.3129 132.891 71.1427 133.075 70.9086 133.075C70.6745 133.075 70.5044 132.891 70.5044 132.687C70.5044 132.483 70.6745 132.299 70.9086 132.299C71.1427 132.299 71.3129 132.483 71.3129 132.687Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M61.597 138.69C61.597 138.894 61.4269 139.078 61.1928 139.078C60.9587 139.078 60.7886 138.894 60.7886 138.69C60.7886 138.486 60.9587 138.302 61.1928 138.302C61.4269 138.302 61.597 138.486 61.597 138.69Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M61.597 124.283C61.597 124.486 61.4269 124.671 61.1928 124.671C60.9587 124.671 60.7886 124.486 60.7886 124.283C60.7886 124.079 60.9587 123.895 61.1928 123.895C61.4269 123.895 61.597 124.079 61.597 124.283Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M68.8837 112.277C68.8837 112.481 68.7135 112.665 68.4794 112.665C68.2453 112.665 68.0752 112.481 68.0752 112.277C68.0752 112.073 68.2453 111.889 68.4794 111.889C68.7135 111.889 68.8837 112.073 68.8837 112.277Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M64.0257 100.271C64.0257 100.475 63.8556 100.659 63.6215 100.659C63.3874 100.659 63.2173 100.475 63.2173 100.271C63.2173 100.067 63.3874 99.8828 63.6215 99.8828C63.8556 99.8828 64.0257 100.067 64.0257 100.271Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M68.8837 88.2651C68.8837 88.4687 68.7135 88.6533 68.4794 88.6533C68.2453 88.6533 68.0752 88.4687 68.0752 88.2651C68.0752 88.0615 68.2453 87.8769 68.4794 87.8769C68.7135 87.8769 68.8837 88.0615 68.8837 88.2651Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M60.3827 76.2591C60.3827 76.4627 60.2126 76.6473 59.9784 76.6473C59.7443 76.6473 59.5742 76.4627 59.5742 76.2591C59.5742 76.0555 59.7443 75.8709 59.9784 75.8709C60.2126 75.8709 60.3827 76.0555 60.3827 76.2591Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M68.8837 66.6544C68.8837 66.858 68.7135 67.0426 68.4794 67.0426C68.2453 67.0426 68.0752 66.858 68.0752 66.6544C68.0752 66.4508 68.2453 66.2662 68.4794 66.2662C68.7135 66.2662 68.8837 66.4508 68.8837 66.6544Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M112.605 112.277C112.605 112.481 112.435 112.665 112.201 112.665C111.967 112.665 111.796 112.481 111.796 112.277C111.796 112.073 111.967 111.889 112.201 111.889C112.435 111.889 112.605 112.073 112.605 112.277Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M128.393 119.481C128.393 119.684 128.223 119.869 127.989 119.869C127.755 119.869 127.584 119.684 127.584 119.481C127.584 119.277 127.755 119.092 127.989 119.092C128.223 119.092 128.393 119.277 128.393 119.481Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M141.752 108.675C141.752 108.879 141.582 109.063 141.348 109.063C141.113 109.063 140.943 108.879 140.943 108.675C140.943 108.472 141.113 108.287 141.348 108.287C141.582 108.287 141.752 108.472 141.752 108.675Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M141.752 144.693C141.752 144.897 141.582 145.081 141.348 145.081C141.113 145.081 140.943 144.897 140.943 144.693C140.943 144.489 141.113 144.305 141.348 144.305C141.582 144.305 141.752 144.489 141.752 144.693Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M166.041 160.301C166.041 160.504 165.871 160.689 165.637 160.689C165.403 160.689 165.233 160.504 165.233 160.301C165.233 160.097 165.403 159.913 165.637 159.913C165.871 159.913 166.041 160.097 166.041 160.301Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M175.757 148.295C175.757 148.498 175.587 148.683 175.353 148.683C175.119 148.683 174.949 148.498 174.949 148.295C174.949 148.091 175.119 147.907 175.353 147.907C175.587 147.907 175.757 148.091 175.757 148.295Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M175.757 136.289C175.757 136.492 175.587 136.677 175.353 136.677C175.119 136.677 174.949 136.492 174.949 136.289C174.949 136.085 175.119 135.901 175.353 135.901C175.587 135.901 175.757 136.085 175.757 136.289Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M173.328 124.283C173.328 124.486 173.158 124.671 172.924 124.671C172.69 124.671 172.52 124.486 172.52 124.283C172.52 124.079 172.69 123.895 172.924 123.895C173.158 123.895 173.328 124.079 173.328 124.283Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M178.186 113.478C178.186 113.681 178.016 113.866 177.782 113.866C177.548 113.866 177.377 113.681 177.377 113.478C177.377 113.274 177.548 113.089 177.782 113.089C178.016 113.089 178.186 113.274 178.186 113.478Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M178.186 101.472C178.186 101.675 178.016 101.86 177.782 101.86C177.548 101.86 177.377 101.675 177.377 101.472C177.377 101.268 177.548 101.083 177.782 101.083C178.016 101.083 178.186 101.268 178.186 101.472Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M175.757 93.0674C175.757 93.271 175.587 93.4556 175.353 93.4556C175.119 93.4556 174.949 93.271 174.949 93.0674C174.949 92.8639 175.119 92.6793 175.353 92.6793C175.587 92.6793 175.757 92.8639 175.757 93.0674Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M124.749 156.699C124.749 156.902 124.579 157.087 124.345 157.087C124.111 157.087 123.941 156.902 123.941 156.699C123.941 156.495 124.111 156.311 124.345 156.311C124.579 156.311 124.749 156.495 124.749 156.699Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M136.894 174.708C136.894 174.911 136.724 175.096 136.49 175.096C136.256 175.096 136.085 174.911 136.085 174.708C136.085 174.504 136.256 174.32 136.49 174.32C136.724 174.32 136.894 174.504 136.894 174.708Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M105.318 167.504C105.318 167.708 105.148 167.892 104.914 167.892C104.679 167.892 104.509 167.708 104.509 167.504C104.509 167.301 104.679 167.116 104.914 167.116C105.148 167.116 105.318 167.301 105.318 167.504Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M117.463 187.914C117.463 188.118 117.293 188.303 117.059 188.303C116.824 188.303 116.654 188.118 116.654 187.914C116.654 187.711 116.824 187.526 117.059 187.526C117.293 187.526 117.463 187.711 117.463 187.914Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M105.318 199.92C105.318 200.124 105.148 200.309 104.914 200.309C104.679 200.309 104.509 200.124 104.509 199.92C104.509 199.717 104.679 199.532 104.914 199.532C105.148 199.532 105.318 199.717 105.318 199.92Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M142.966 189.115C142.966 189.319 142.796 189.503 142.562 189.503C142.328 189.503 142.158 189.319 142.158 189.115C142.158 188.911 142.328 188.727 142.562 188.727C142.796 188.727 142.966 188.911 142.966 189.115Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M136.894 204.723C136.894 204.926 136.724 205.111 136.49 205.111C136.256 205.111 136.085 204.926 136.085 204.723C136.085 204.519 136.256 204.335 136.49 204.335C136.724 204.335 136.894 204.519 136.894 204.723Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M117.463 215.528C117.463 215.732 117.293 215.916 117.059 215.916C116.824 215.916 116.654 215.732 116.654 215.528C116.654 215.324 116.824 215.14 117.059 215.14C117.293 215.14 117.463 215.324 117.463 215.528Z" fill="#14295E" stroke="#14295E" stroke-width="2"></path>
<path d="M202.071 226.594C202.071 226.594 209.219 234.735 210.36 245.73L202.071 226.594Z" fill="white"></path>
<path d="M202.071 226.594C202.071 226.594 209.219 234.735 210.36 245.73" stroke="#14295E" stroke-width="2" stroke-miterlimit="10" stroke-linejoin="round"></path>
<path d="M210.93 245.466C210.93 245.466 210.36 229.73 214.353 221.519L210.93 245.466Z" fill="white"></path>
<path d="M210.93 245.466C210.93 245.466 210.36 229.73 214.353 221.519" stroke="#14295E" stroke-width="2" stroke-miterlimit="10" stroke-linejoin="round"></path>
<path d="M210.102 244.179C210.102 244.179 212.817 237.151 221.843 234.994L210.102 244.179Z" fill="white"></path>
<path d="M210.102 244.179C210.102 244.179 212.817 237.151 221.843 234.994" stroke="#14295E" stroke-width="2" stroke-miterlimit="10" stroke-linejoin="round"></path>
<path d="M212.198 240.614C212.198 240.614 212.204 236.026 219.47 228.891L212.198 240.614Z" fill="white"></path>
<path d="M212.198 240.614C212.198 240.614 212.204 236.026 219.47 228.891" stroke="#14295E" stroke-width="2" stroke-miterlimit="10" stroke-linejoin="round"></path>
<path d="M0.42749 225.12C0.42749 225.12 10.8264 228.422 12.7619 235.626L0.42749 225.12Z" fill="white"></path>
<path d="M0.42749 225.12C0.42749 225.12 10.8264 228.422 12.7619 235.626" stroke="#14295E" stroke-width="2" stroke-miterlimit="10" stroke-linejoin="round"></path>
<path d="M9.09961 214.615C9.09961 214.615 14.337 222.719 12.9328 235.626L9.09961 214.615Z" fill="white"></path>
<path d="M9.09961 214.615C9.09961 214.615 14.337 222.719 12.9328 235.626" stroke="#14295E" stroke-width="2" stroke-miterlimit="10" stroke-linejoin="round"></path>
<path d="M19.1422 224.22C19.1422 224.22 14.338 227.84 13.1458 233.224L19.1422 224.22Z" fill="white"></path>
<path d="M19.1422 224.22C19.1422 224.22 14.338 227.84 13.1458 233.224" stroke="#14295E" stroke-width="2" stroke-miterlimit="10" stroke-linejoin="round"></path>
<path d="M4.45483 220.618C4.45483 220.618 10.3374 224.82 12.9561 230.823L4.45483 220.618Z" fill="white"></path>
<path d="M4.45483 220.618C4.45483 220.618 10.3374 224.82 12.9561 230.823" stroke="#14295E" stroke-width="2" stroke-miterlimit="10" stroke-linejoin="round"></path>
<path d="M70.7188 265.098C70.7188 265.098 79.5465 269.881 81.7192 280.407L70.7188 265.098Z" fill="white"></path>
<path d="M70.7188 265.098C70.7188 265.098 79.5465 269.881 81.7192 280.407" stroke="#14295E" stroke-width="2" stroke-miterlimit="10" stroke-linejoin="round"></path>
<path d="M89.1258 266.64C89.1258 266.64 82.6457 271.226 81.873 280.407L89.1258 266.64Z" fill="white"></path>
<path d="M89.1258 266.64C89.1258 266.64 82.6457 271.226 81.873 280.407" stroke="#14295E" stroke-width="2" stroke-miterlimit="10" stroke-linejoin="round"></path>
<path d="M81.9428 266.326C81.9428 266.326 79.8047 271.316 80.9148 275.816L81.9428 266.326Z" fill="white"></path>
<path d="M81.9428 266.326C81.9428 266.326 79.8047 271.316 80.9148 275.816" stroke="#14295E" stroke-width="2" stroke-miterlimit="10" stroke-linejoin="round"></path>
<path d="M240.934 194.205C240.934 194.205 249.633 198.857 250.156 203.96L240.934 194.205Z" fill="white"></path>
<path d="M240.934 194.205C240.934 194.205 249.633 198.857 250.156 203.96" stroke="#14295E" stroke-width="2" stroke-miterlimit="10" stroke-linejoin="round"></path>
<path d="M246.817 189.703C246.817 189.703 249.853 195.706 250.157 202.759L246.817 189.703Z" fill="white"></path>
<path d="M246.817 189.703C246.817 189.703 249.853 195.706 250.157 202.759" stroke="#14295E" stroke-width="2" stroke-miterlimit="10" stroke-linejoin="round"></path>
<path d="M255.911 192.104C255.911 192.104 251.021 198.107 250.437 203.51L255.911 192.104Z" fill="white"></path>
<path d="M255.911 192.104C255.911 192.104 251.021 198.107 250.437 203.51" stroke="#14295E" stroke-width="2" stroke-miterlimit="10" stroke-linejoin="round"></path>
<path d="M100.84 109.639L90.1504 115.855" stroke="#14295E" stroke-width="2" stroke-miterlimit="10" stroke-linejoin="round"></path>
<path d="M104.561 145.894L90.1504 154.274" stroke="#14295E" stroke-width="2" stroke-miterlimit="10" stroke-linejoin="round"></path>
<path d="M162.464 263.4C166.758 265.851 160 271.526 164.294 273.977C168.59 276.429 175.589 272.434 179.885 274.886C181.452 275.781 181.512 276.881 181.168 278.036C180.967 278.29 180.825 278.558 180.758 278.838C180.199 281.153 184.678 283.417 190.762 283.895C196.845 284.374 202.23 282.885 202.789 280.57C203.347 278.255 198.868 275.991 192.785 275.513C190.877 275.362 189.038 275.406 187.395 275.608C188.088 273.951 184.579 272.784 182.169 271.517C177.357 268.987 172.507 273.472 168.211 271.021C163.917 268.569 170.042 263.416 165.748 260.965C161.45 258.512 156.717 260.965 150.969 261.777C146.672 259.324 156.585 253.856 152.288 251.403C152.288 251.403 142.813 261.717 147.11 264.169C151.408 266.622 158.167 260.947 162.464 263.4Z" stroke="#14295E" stroke-width="2" stroke-miterlimit="10" stroke-linejoin="round"></path>
<path d="M200.198 282.969L205.474 285" stroke="#14295E" stroke-width="2" stroke-miterlimit="10" stroke-linejoin="round"></path>
</svg>
</div>
</div>
<div class="banner">
<div id="adfox_158469918412142908">
</div>
</div>
<script>
    window.Ya.adfoxCode.create({
        ownerId: 260122,
        containerId: 'adfox_158469918412142908',
        params: {
            pp: 'i',
            ps: 'dyeo',
            p2: 'fufs',
            puid1: ''
        }
    });
</script>
</div></body></html>